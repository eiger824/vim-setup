#!/bin/bash

# Common source script containing bash functions used across source files
# in this repository

err()
{
    echo "$@" >&2
}

die()
{
    err "$@"
    exit 1
}

get_host()
{
    local name
    local fname
    name="$@"
    fname="/etc/issue"

    if grep -i -E '(ubuntu)' ${fname} &> /dev/null; then
        echo -n "ubuntu"
    elif grep -i -E '(elementary)' ${fname} &> /dev/null; then
        echo -n "elementary"
    elif grep -i -E '(mint)' ${fname} &> /dev/null; then
        echo -n "mint"
    elif grep -i -E '(debian)' ${fname} &> /dev/null; then
        echo -n "debian"
    elif grep -i arch ${fname} &> /dev/null; then
        echo -n "arch"
    else
        # TODO: add more options. What about *BSD?
        echo -n "fedora"
    fi
}

get_package_manager()
{
    local host
    host=$(get_host)
    case ${host,,} in
        ubuntu|elementary|mint|debian)
            echo -n "apt"
            ;;
        arch)
            echo -n "pacman" 
            ;;
        fedora|redhat|rhl|centos)
            echo -n "yum";
    esac
}

check_git_user_set()
{
	local name
	local email
	if [ ! -f ~/.gitconfig ]; then
		echo -n "Enter your GIT user name: "
		read name
		echo -n "Enter your GIT user e-mail: "
		read email
		git config --global user.name $name
		git config --global user.email $email
	fi
}

check_if_su_allowed()
{
    local user
    local pm
    user=$(whoami)
    pm=$(get_package_manager)

    # Possible scenarios with executing commands as root:
    #
    # 1. sudo -v - updating sudo timestamp
    #    it can happen that the user is not even allowed to do this
    # In case [1] goes Ok:
    # 2. sudo -l : listing which commands the user is allowed to
    #    run as root
    if ! sudo -v &> /dev/null; then
        return 1
    else
        if sudo -l 2>&1 | grep ALL &> /dev/null; then
            return 0
        elif sudo -l 2>&1 | grep ${pm} &> /dev/null; then
            return 0
        fi
        return 2
    fi
}
