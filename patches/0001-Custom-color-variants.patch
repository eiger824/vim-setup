From 5373f3a27532281746a4c52d82d0128ed295336f Mon Sep 17 00:00:00 2001
From: Santiago Pagola <santipagola@gmail.com>
Date: Thu, 1 Mar 2018 13:36:47 +0100
Subject: [PATCH] Custom color variants

---
 autoload/onedark.vim |  6 ++---
 colors/onedark.vim   | 74 ++++++++++++++++++++++++++--------------------------
 2 files changed, 40 insertions(+), 40 deletions(-)

diff --git a/autoload/onedark.vim b/autoload/onedark.vim
index 054a430..3a4d30f 100644
--- a/autoload/onedark.vim
+++ b/autoload/onedark.vim
@@ -5,16 +5,16 @@ let s:overrides = get(g:, "onedark_color_overrides", {})
 let s:colors = {
       \ "red": get(s:overrides, "red", { "gui": "#E06C75", "cterm": "204", "cterm16": "1" }),
       \ "dark_red": get(s:overrides, "dark_red", { "gui": "#BE5046", "cterm": "196", "cterm16": "9" }),
-      \ "green": get(s:overrides, "green", { "gui": "#98C379", "cterm": "114", "cterm16": "2" }),
+      \ "orange": get(s:overrides, "orange", { "gui": "#D78700", "cterm": "172", "cterm16": "2" }),
       \ "yellow": get(s:overrides, "yellow", { "gui": "#E5C07B", "cterm": "180", "cterm16": "3" }),
       \ "dark_yellow": get(s:overrides, "dark_yellow", { "gui": "#D19A66", "cterm": "173", "cterm16": "11" }),
       \ "blue": get(s:overrides, "blue", { "gui": "#61AFEF", "cterm": "39", "cterm16": "4" }),
       \ "purple": get(s:overrides, "purple", { "gui": "#C678DD", "cterm": "170", "cterm16": "5" }),
       \ "cyan": get(s:overrides, "cyan", { "gui": "#56B6C2", "cterm": "38", "cterm16": "6" }),
-      \ "white": get(s:overrides, "white", { "gui": "#ABB2BF", "cterm": "145", "cterm16": "7" }),
+      \ "white": get(s:overrides, "white", { "gui": "#FFFFFF", "cterm": "231", "cterm16": "7" }),
       \ "black": get(s:overrides, "black", { "gui": "#282C34", "cterm": "235", "cterm16": "0" }),
       \ "visual_black": get(s:overrides, "visual_black", { "gui": "NONE", "cterm": "NONE", "cterm16": "0" }),
-      \ "comment_grey": get(s:overrides, "comment_grey", { "gui": "#5C6370", "cterm": "59", "cterm16": "15" }),
+      \ "comment_green": get(s:overrides, "comment_green", { "gui": "#87FF5F", "cterm": "119", "cterm16": "15" }),
       \ "gutter_fg_grey": get(s:overrides, "gutter_fg_grey", { "gui": "#4B5263", "cterm": "238", "cterm16": "15" }),
       \ "cursor_grey": get(s:overrides, "cursor_grey", { "gui": "#2C323C", "cterm": "236", "cterm16": "8" }),
       \ "visual_grey": get(s:overrides, "visual_grey", { "gui": "#3E4452", "cterm": "237", "cterm16": "15" }),
diff --git a/colors/onedark.vim b/colors/onedark.vim
index e5e08a6..b193135 100644
--- a/colors/onedark.vim
+++ b/colors/onedark.vim
@@ -134,7 +134,7 @@ let s:colors = onedark#GetColors()
 
 let s:red = s:colors.red
 let s:dark_red = s:colors.dark_red
-let s:green = s:colors.green
+let s:orange = s:colors.orange
 let s:yellow = s:colors.yellow
 let s:dark_yellow = s:colors.dark_yellow
 let s:blue = s:colors.blue
@@ -143,7 +143,7 @@ let s:cyan = s:colors.cyan
 let s:white = s:colors.white
 let s:black = s:colors.black
 let s:visual_black = s:colors.visual_black " Black out selected text in 16-color visual mode
-let s:comment_grey = s:colors.comment_grey
+let s:comment_green = s:colors.comment_green
 let s:gutter_fg_grey = s:colors.gutter_fg_grey
 let s:cursor_grey = s:colors.cursor_grey
 let s:visual_grey = s:colors.visual_grey
@@ -155,10 +155,10 @@ let s:vertsplit = s:colors.vertsplit
 
 " Syntax Groups (descriptions and ordering from `:h w18`) {{{
 
-call s:h("Comment", { "fg": s:comment_grey, "gui": "italic", "cterm": "italic" }) " any comment
+call s:h("Comment", { "fg": s:comment_green, "gui": "italic", "cterm": "italic" }) " any comment
 call s:h("Constant", { "fg": s:cyan }) " any constant
-call s:h("String", { "fg": s:green }) " a string constant: "this is a string"
-call s:h("Character", { "fg": s:green }) " a character constant: 'c', '\n'
+call s:h("String", { "fg": s:orange }) " a string constant: "this is a string"
+call s:h("Character", { "fg": s:orange }) " a character constant: 'c', '\n'
 call s:h("Number", { "fg": s:dark_yellow }) " a number constant: 234, 0xff
 call s:h("Boolean", { "fg": s:dark_yellow }) " a boolean constant: TRUE, false
 call s:h("Float", { "fg": s:dark_yellow }) " a floating point constant: 2.3e10
@@ -184,7 +184,7 @@ call s:h("Special", { "fg": s:blue }) " any special symbol
 call s:h("SpecialChar", {}) " special character in a constant
 call s:h("Tag", {}) " you can use CTRL-] on this
 call s:h("Delimiter", {}) " character that needs attention
-call s:h("SpecialComment", { "fg": s:comment_grey }) " special things inside a comment
+call s:h("SpecialComment", { "fg": s:comment_green }) " special things inside a comment
 call s:h("Debug", {}) " debugging statements
 call s:h("Underlined", { "gui": "underline", "cterm": "underline" }) " text that stands out, HTML links
 call s:h("Ignore", {}) " left blank, hidden
@@ -206,16 +206,16 @@ else
   call s:h("CursorLine", { "bg": s:cursor_grey }) " the screen line that the cursor is in when 'cursorline' is set
 endif
 call s:h("Directory", { "fg": s:blue }) " directory names (and other special names in listings)
-call s:h("DiffAdd", { "bg": s:green, "fg": s:black }) " diff mode: Added line
+call s:h("DiffAdd", { "bg": s:orange, "fg": s:black }) " diff mode: Added line
 call s:h("DiffChange", { "bg": s:yellow, "fg": s:black }) " diff mode: Changed line
 call s:h("DiffDelete", { "bg": s:red, "fg": s:black }) " diff mode: Deleted line
 call s:h("DiffText", { "bg": s:black, "fg": s:yellow }) " diff mode: Changed text within a changed line
 call s:h("ErrorMsg", { "fg": s:red }) " error messages on the command line
 call s:h("VertSplit", { "fg": s:vertsplit }) " the column separating vertically split windows
-call s:h("Folded", { "fg": s:comment_grey }) " line used for closed folds
+call s:h("Folded", { "fg": s:comment_green }) " line used for closed folds
 call s:h("FoldColumn", {}) " 'foldcolumn'
 call s:h("SignColumn", {}) " column where signs are displayed
-call s:h("IncSearch", { "fg": s:yellow, "bg": s:comment_grey }) " 'incsearch' highlighting; also used for the text replaced with ":s///c"
+call s:h("IncSearch", { "fg": s:yellow, "bg": s:comment_green }) " 'incsearch' highlighting; also used for the text replaced with ":s///c"
 call s:h("LineNr", { "fg": s:gutter_fg_grey }) " Line number for ":number" and ":#" commands, and when 'number' or 'relativenumber' option is set.
 call s:h("CursorLineNr", {}) " Like LineNr when 'cursorline' or 'relativenumber' is set for the cursor line.
 call s:h("MatchParen", { "fg": s:blue, "gui": "underline" }) " The character under the cursor or just before it, if it is a paired bracket, and its match.
@@ -236,11 +236,11 @@ call s:h("SpellCap", { "fg": s:dark_yellow }) " Word that should start with a ca
 call s:h("SpellLocal", { "fg": s:dark_yellow }) " Word that is recognized by the spellchecker as one that is used in another region. This will be combined with the highlighting used otherwise.
 call s:h("SpellRare", { "fg": s:dark_yellow }) " Word that is recognized by the spellchecker as one that is hardly ever used. spell This will be combined with the highlighting used otherwise.
 call s:h("StatusLine", { "fg": s:white, "bg": s:cursor_grey }) " status line of current window
-call s:h("StatusLineNC", { "fg": s:comment_grey }) " status lines of not-current windows Note: if this is equal to "StatusLine" Vim will use "^^^" in the status line of the current window.
-call s:h("TabLine", { "fg": s:comment_grey }) " tab pages line, not active tab page label
+call s:h("StatusLineNC", { "fg": s:comment_green }) " status lines of not-current windows Note: if this is equal to "StatusLine" Vim will use "^^^" in the status line of the current window.
+call s:h("TabLine", { "fg": s:comment_green }) " tab pages line, not active tab page label
 call s:h("TabLineFill", {}) " tab pages line, where there are no labels
 call s:h("TabLineSel", { "fg": s:white }) " tab pages line, active tab page label
-call s:h("Title", { "fg": s:green }) " titles for output from ":set all", ":autocmd" etc.
+call s:h("Title", { "fg": s:orange }) " titles for output from ":set all", ":autocmd" etc.
 call s:h("Visual", { "fg": s:visual_black, "bg": s:visual_grey }) " Visual mode selection
 call s:h("VisualNOS", { "bg": s:visual_grey }) " Visual mode selection when vim is "Not Owning the Selection". Only X11 Gui's gui-x11 and xterm-clipboard supports this.
 call s:h("WarningMsg", { "fg": s:yellow }) " warning messages
@@ -252,7 +252,7 @@ call s:h("WildMenu", { "fg": s:black, "bg": s:blue }) " current match in 'wildme
 
 " CSS
 call s:h("cssAttrComma", { "fg": s:purple })
-call s:h("cssAttributeSelector", { "fg": s:green })
+call s:h("cssAttributeSelector", { "fg": s:orange })
 call s:h("cssBraces", { "fg": s:white })
 call s:h("cssClassName", { "fg": s:dark_yellow })
 call s:h("cssClassNameDot", { "fg": s:dark_yellow })
@@ -316,7 +316,7 @@ call s:h("jsOperator", { "fg": s:purple })
 call s:h("jsStorageClass", { "fg": s:purple })
 call s:h("jsSuper", { "fg": s:red })
 call s:h("jsTemplateBraces", { "fg": s:dark_red })
-call s:h("jsTemplateVar", { "fg": s:green })
+call s:h("jsTemplateVar", { "fg": s:orange })
 call s:h("jsThis", { "fg": s:red })
 call s:h("jsUndefined", { "fg": s:dark_yellow })
 " https://github.com/othree/yajs.vim
@@ -336,7 +336,7 @@ call s:h("javascriptMethodName", { "fg": s:white })
 call s:h("javascriptObjectLabel", { "fg": s:white })
 call s:h("javascriptOpSymbol", { "fg": s:cyan })
 call s:h("javascriptOpSymbols", { "fg": s:cyan })
-call s:h("javascriptPropertyName", { "fg": s:green })
+call s:h("javascriptPropertyName", { "fg": s:orange })
 call s:h("javascriptTemplateSB", { "fg": s:dark_red })
 call s:h("javascriptVariable", { "fg": s:purple })
 
@@ -349,7 +349,7 @@ call s:h("jsonQuote", { "fg": s:white })
 call s:h("jsonMissingCommaError", { "fg": s:red, "gui": "reverse" })
 call s:h("jsonNoQuotesError", { "fg": s:red, "gui": "reverse" })
 call s:h("jsonNumError", { "fg": s:red, "gui": "reverse" })
-call s:h("jsonString", { "fg": s:green })
+call s:h("jsonString", { "fg": s:orange })
 call s:h("jsonStringSQError", { "fg": s:red, "gui": "reverse" })
 call s:h("jsonSemicolonError", { "fg": s:red, "gui": "reverse" })
 
@@ -359,12 +359,12 @@ call s:h("lessAmpersandChar", { "fg": s:white })
 call s:h("lessClass", { "fg": s:dark_yellow })
 
 " Markdown
-call s:h("markdownCode", { "fg": s:green })
-call s:h("markdownCodeBlock", { "fg": s:green })
-call s:h("markdownCodeDelimiter", { "fg": s:green })
+call s:h("markdownCode", { "fg": s:orange })
+call s:h("markdownCodeBlock", { "fg": s:orange })
+call s:h("markdownCodeDelimiter", { "fg": s:orange })
 call s:h("markdownHeadingDelimiter", { "fg": s:red })
-call s:h("markdownRule", { "fg": s:comment_grey })
-call s:h("markdownHeadingRule", { "fg": s:comment_grey })
+call s:h("markdownRule", { "fg": s:comment_green })
+call s:h("markdownHeadingRule", { "fg": s:comment_green })
 call s:h("markdownH1", { "fg": s:red })
 call s:h("markdownH2", { "fg": s:red })
 call s:h("markdownH3", { "fg": s:red })
@@ -373,7 +373,7 @@ call s:h("markdownH5", { "fg": s:red })
 call s:h("markdownH6", { "fg": s:red })
 call s:h("markdownIdDelimiter", { "fg": s:purple })
 call s:h("markdownId", { "fg": s:purple })
-call s:h("markdownBlockquote", { "fg": s:comment_grey })
+call s:h("markdownBlockquote", { "fg": s:comment_green })
 call s:h("markdownItalic", { "fg": s:purple, "gui": "italic", "cterm": "italic" })
 call s:h("markdownBold", { "fg": s:dark_yellow, "gui": "bold", "cterm": "bold" })
 call s:h("markdownListMarker", { "fg": s:red })
@@ -384,12 +384,12 @@ call s:h("markdownLinkDelimiter", { "fg": s:white })
 call s:h("markdownUrl", { "fg": s:purple })
 
 " Perl
-call s:h("perlFiledescRead", { "fg": s:green })
+call s:h("perlFiledescRead", { "fg": s:orange })
 call s:h("perlFunction", { "fg": s:purple })
 call s:h("perlMatchStartEnd",{ "fg": s:blue })
 call s:h("perlMethod", { "fg": s:purple })
-call s:h("perlPOD", { "fg": s:comment_grey })
-call s:h("perlSharpBang", { "fg": s:comment_grey })
+call s:h("perlPOD", { "fg": s:comment_green })
+call s:h("perlSharpBang", { "fg": s:comment_green })
 call s:h("perlSpecialString",{ "fg": s:cyan })
 call s:h("perlStatementFiledesc", { "fg": s:red })
 call s:h("perlStatementFlow",{ "fg": s:red })
@@ -410,7 +410,7 @@ call s:h("phpClass", { "fg": s:yellow })
 call s:h("phpUseClass", { "fg": s:white })
 call s:h("phpUseAlias", { "fg": s:white })
 call s:h("phpInclude", { "fg": s:purple })
-call s:h("phpClassExtends", { "fg": s:green })
+call s:h("phpClassExtends", { "fg": s:orange })
 call s:h("phpDocTags", { "fg": s:white })
 call s:h("phpFunction", { "fg": s:blue })
 call s:h("phpFunctions", { "fg": s:cyan })
@@ -436,7 +436,7 @@ call s:h("rubyInterpolationDelimiter", { "fg": s:red })
 call s:h("rubyInterpolationDelimiter", { "fg": s:red})
 call s:h("rubyRegexp", { "fg": s:cyan})
 call s:h("rubyRegexpDelimiter", { "fg": s:cyan})
-call s:h("rubyStringDelimiter", { "fg": s:green})
+call s:h("rubyStringDelimiter", { "fg": s:orange})
 call s:h("rubySymbol", { "fg": s:cyan})
 
 " Sass
@@ -487,10 +487,10 @@ hi link GitGutterDelete SignifySignDelete
 call s:h("EasyMotionTarget", { "fg": s:red, "gui": "bold", "cterm": "bold" })
 call s:h("EasyMotionTarget2First", { "fg": s:yellow, "gui": "bold", "cterm": "bold" })
 call s:h("EasyMotionTarget2Second", { "fg": s:dark_yellow, "gui": "bold", "cterm": "bold" })
-call s:h("EasyMotionShade",  { "fg": s:comment_grey })
+call s:h("EasyMotionShade",  { "fg": s:comment_green })
 
 " mhinz/vim-signify
-call s:h("SignifySignAdd", { "fg": s:green })
+call s:h("SignifySignAdd", { "fg": s:orange })
 call s:h("SignifySignChange", { "fg": s:yellow })
 call s:h("SignifySignDelete", { "fg": s:red })
 
@@ -500,23 +500,23 @@ call s:h("NeomakeErrorSign", { "fg": s:red })
 call s:h("NeomakeInfoSign", { "fg": s:blue })
 
 " tpope/vim-fugitive
-call s:h("diffAdded", { "fg": s:green })
+call s:h("diffAdded", { "fg": s:orange })
 call s:h("diffRemoved", { "fg": s:red })
 
 " }}}
 
 " Git Highlighting {{{
 
-call s:h("gitcommitComment", { "fg": s:comment_grey })
-call s:h("gitcommitUnmerged", { "fg": s:green })
+call s:h("gitcommitComment", { "fg": s:comment_green })
+call s:h("gitcommitUnmerged", { "fg": s:orange })
 call s:h("gitcommitOnBranch", {})
 call s:h("gitcommitBranch", { "fg": s:purple })
 call s:h("gitcommitDiscardedType", { "fg": s:red })
-call s:h("gitcommitSelectedType", { "fg": s:green })
+call s:h("gitcommitSelectedType", { "fg": s:orange })
 call s:h("gitcommitHeader", {})
 call s:h("gitcommitUntrackedFile", { "fg": s:cyan })
 call s:h("gitcommitDiscardedFile", { "fg": s:red })
-call s:h("gitcommitSelectedFile", { "fg": s:green })
+call s:h("gitcommitSelectedFile", { "fg": s:orange })
 call s:h("gitcommitUnmergedFile", { "fg": s:yellow })
 call s:h("gitcommitFile", {})
 call s:h("gitcommitSummary", { "fg": s:white })
@@ -536,7 +536,7 @@ hi link gitcommitUnmergedArrow gitcommitUnmergedFile
 if has("nvim")
   let g:terminal_color_0 =  s:black.gui
   let g:terminal_color_1 =  s:red.gui
-  let g:terminal_color_2 =  s:green.gui
+  let g:terminal_color_2 =  s:orange.gui
   let g:terminal_color_3 =  s:yellow.gui
   let g:terminal_color_4 =  s:blue.gui
   let g:terminal_color_5 =  s:purple.gui
@@ -544,12 +544,12 @@ if has("nvim")
   let g:terminal_color_7 =  s:white.gui
   let g:terminal_color_8 =  s:visual_grey.gui
   let g:terminal_color_9 =  s:dark_red.gui
-  let g:terminal_color_10 = s:green.gui " No dark version
+  let g:terminal_color_10 = s:orange.gui " No dark version
   let g:terminal_color_11 = s:dark_yellow.gui
   let g:terminal_color_12 = s:blue.gui " No dark version
   let g:terminal_color_13 = s:purple.gui " No dark version
   let g:terminal_color_14 = s:cyan.gui " No dark version
-  let g:terminal_color_15 = s:comment_grey.gui
+  let g:terminal_color_15 = s:comment_green.gui
   let g:terminal_color_background = g:terminal_color_0
   let g:terminal_color_foreground = g:terminal_color_7
 endif
-- 
2.7.4

